1.
*.NET- It is a developer platform made up of tools, programming languages, and libraries for building many different types of applications.
*.NET Framework- .NET Framework is the execution and development environment for .NET applications.
* IL(Intermidiate Language)- A low-level assembly language, always interpreted by the .NET runtime, Platform independence and easy portability
  JIT(Just-In-Time)- converting IL code into machine code or dynamically compile IL code into machine code (Pre-JIT= entire code into native code at one stretch., Econo-JIT=It compiles the IL code bit-by-bit,, Normal-JIT=compiles code only as it is)
*Assembly- (.exe & .dll)files, A compiled unit of code that contains metadata and IL code
*CLR(Common Language Runtime)- Heart of .NET framework, runtime environment that executes MSIL code, CLR is present in every .NET framework version,
 CLS- subset of CTS, CLS enables cross-language integration or Interoperability.
 CTS- CTS is responsible for understanding all the data type systems of .NET programming languages and converting them into CLR understandable format which will be a common format. 
 Garbage Collector-  GC.Collect(), Code that is run under the garbage collection system is 'managed code'
 Memory Management- stack for store value, Heap for store objects
 App-Domain- provide isolation, unloading, and security boundaries for executing managed code
*Security- (CAS- Code Access Security)-  to prevent unauthorized code from performing harmful actions.

2.
*.NET Core- cross-platform and new apps and services, (Windows, macOS, Linux)
 .NET Framework- for legacy apps, (Windows only)
 Xamarin- Mobile apps only (Android, iOS, macOS)
*Versions-  .NET Framework 1.0 is the first
            ASP.NET Core= 5.0
            WPF & WCF= 3.0
            Entity Framework= 3.5
            Recent .NET Core= 6.0
*Managed Code- Code that is executed by the (CLR), C# and VB.NET language is used, Platform independence and automatic memory management and garbage collection 
 Unmanaged Code-  Code that is directly executed by the CPU without any runtime environment, C++ used, 
*Intro of VS code- Lightweight, cross platform, (run on all OS), support many languages, Microsoft Visual Studio 2019 only runs on Windows.
*ILDASM(IL Disassembler)- To decompile .NET assemblies into human-readable IL code, (.exe & .dll files), allows inspecting the IL code

3.
DataTypes- ValueType(Simple(int, char, boolean, float, etc), Enum, struct, nullable), ReferenceType(Class, Interface, Array, Delegate)
Boxing-  Value type is converted to object type
Unboxing-  Object type is converted to a value type
Access Specifier- public, private, protected, internal
Method Overloading- Same name with different signature  


20.
*Localization in MVC: It is the process of adapting software to meet the requirements of local markets and different languages.
*Deploying: Enabling IIS(Internet Information Services) and required IIS components on Windows 10

21.
*Web API(Application programming Interface)- It is set of rules, it define how apps or devices can connect & communicate with each other.
                                            HttpResponseMessage(for return data)
                                            Used to access service data in web apps, mobile apps and other external devices to build web services.
                                            Used to create RESTful(Representational State Transfer) web services, which is an architectural style for networked hypermedia applications.
                                            Lightweight, Maintainable, Scalable, and support limited Bandwidth.
                                            Create simple HTTP web Service & supports XML, JSON, etc..
*CORS(Cross Origin Resource Sharing)- is W3C standard that allows server to relax same-origin policy. Using CORS, a server can explicitly allow some cross-origin requests while rejecting others. CORS is safer and more flexible
*Different Verbs- POST(Create data), GET(Retrive or get data), PUT(Update data), and DELETE(Delete data)
*Consuming API- Creating client which can send requests to the API that you build, using the HttpClient class
*Newtonsoft API's-  JSON library for serializing and deserializing JSON data.


























