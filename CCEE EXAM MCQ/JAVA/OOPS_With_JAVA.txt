Java is object oriented programming language.

Collection: 1.List: 1)ArrayList  
                        List <data-type> list1= new ArrayList();  
                    2)LinkedList
                        List <data-type> list2 = new LinkedList();  
                    3)Vector:(insert, delete, search, sort, iterate, replace operations)
                        List <data-type> list3 = new Vector(); 
                    Vector & ArrayList is same and use dynamic array to store the elements.
                    Linkedlist uses Doubly linked list to store the elements.

            2.Queue: 1)PriorityQueue
                         Queue<String> q1 = new PriorityQueue(); 
                     2)ArrayDequeue
                         Queue<String> q2 = new ArrayDeque();
                    Queue interface maintains the first-in-first-out order.In Deque, we can remove and add the elements from both the side.

            A)Comparable:1)Single Sorting sequence 2)affects the original class 3)compareTo() 4)java.lang 5)Collections.sort(List)

            B)Comparator:1)Multiple sorting sequences 2)does not affects the original class 3)compare() 4)java.lang 5)Collections.sort(List, Comparator)

            3.Set: 1)HashSet: It uses hash table to store the elements. It contains unique items.
                      Set<data-type> s1 = new HashSet<data-type>();  
                   2)LinkedHashSet: Insertion order
                      Set<data-type> s2 = new LinkedHashSet<data-type>();
                   3)TreeSet: It is quite fast than others and sorted order
                      Set<data-type> s3 = new TreeSet<data-type>(); 
                   4)BackedSet Collection: Share same data with other collection, but different views.
                  

            4.Map: Map Provides Key-Value pair
                   1)HashTable:collection class is synchronized and does not allow null keys or values
                   2)HashMap:HashMap is the implementation of Map, but it doesn't maintain any order.
                   3)LinkedHashMap:LinkedHashMap is the implementation of Map. It inherits HashMap class. It maintains insertion order.
                   4)TreeMap:TreeMap is the implementation of Map and SortedMap. It maintains ascending order.


Multithreading: 1) Thread: It is a class. It has multiple methods including start() and run(). Each thread creates a unique object. More memory required. 
                2) Runnable Interface: Runnable is a functional interface. It has only abstract method run(). Multiple threads share the same objects.Less memory required. 
                3) sleep(): It sleeps a thread for the specified amount of time. (static void)
                4) join():	It waits for a thread to die. (void)
                5) yield():	It causes the currently executing thread object to pause and allow other threads to execute temporarily. (static void)
                6) getPriority()	It returns the priority of the thread. (int)
                7) setPriority()	It changes the priority of the thread. (void)

Synchronization: Multi-threaded java programs. Single thread at a time. It prevents race condition and data corruption.
Deadlock: Deadlock in java is a programming situation where two or more threads are blocked forever. Java deadlock situation arises with at least two threads and two or more resources.
wait()- pause the execution of a thread until another thread signals that it can resume.
notify()- wakes up only one thread waiting on the object and that thread starts execution.
notifyall()- wakes up all threads that are waiting on this object's monitor.

wildcards- it is question marks'?', upper bounded: List, Lower bounded: Super

Reflection: examining or Modifying
            It allows access to private fields and methods

-String is immutable, 
-Stringbuffer is mutable, threadsafe, synchronised, java 1.0
-Stringbuilder is mutable, non threadsafe, non synchronised, 1.5
-String pool is storage area in java heap


-inputstream- read data from a source
-outputstream- write data to a destination

-serialization- object to stream
-deserialization- stream to object

-Shallow copy= a copy of the original object is stored and only the reference address is finally copied. 
-Deep copy= the copy of the original object and the repetitive copies both are stored.

-string to date using parse()
-date to string using format()

-access specifiers- public, private, protected, default


Answers
1.
2.A
3.D
4.A
5.C
6.A
7.B
8.B
9.A
10.C
11.D
12.B
13.B
14.D
15.B
16.B
17.
18.
19.
20.A
21.A
22.
23.C
24.
25.A
26.A
27.B
28.C
29.B
30.
31.B
32.
33.
34.
35.B
36.A
37.
38.
39.C
40.D



